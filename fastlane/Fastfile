default_platform(:ios)

desc "Runs the unit tests to ensure the build is working"
lane :test do
  scan(scheme: "TOReachabilityTests", devices: ["iPhone SE"], clean: true)
end

desc "Cuts a new release and distributes it on CocoaPods and Carthage"
lane :release do

  # Fetch the latest tag that would have just been added
  sh('git fetch --tags')
  last_tag = last_git_tag
  if !last_tag
    UI.user_error! "--- ERROR: Was unable to locate any git tags. ---"
    next
  end

  # Verify the tag conforms to semantic versioning
  latest_version = last_tag.scan(/[vV]?(\d{1,3}\.\d{1,3}\.\d{1,3})/).last.first
  if !latest_version
    UI.success "--- Latest tag doesn't appear to be a new version. Ignoring. ---"
    next
  end

  UI.success "--- Found latest tag: " + latest_version + " ---"

  # Load the Release Notes from file, and throw an error if they weren't updated
  changelog_contents = File.read("../CHANGELOG.md")
  v = latest_version.split(".")
  release_notes = changelog_contents.scan(/#{v[0]}\.#{v[1]}\.#{v[2]}\ [Rr]elease\ [Nn]otes.*\n\=+\n([\s\S]*?)(\d{1,3}\.\d{1,3}\.\d{1,3}\ [Rr]elease\ [Nn]otes.*\n\=+\n|\Z)/).last
  if !release_notes 
    UI.user_error! "--- ERROR: Unable to find Release Notes entry for v" + latest_version + " in CHANGELOG. ---"
    next
  end

  # Publish the Release on GitHub
  set_github_release(repository_name: "TimOliver/TOReachability", 
                      api_token: ENV["GITHUB_TOKEN"],
                      name: "v"+latest_version,
                      tag_name: latest_version,
                      description: release_notes.first)

  # Force master
  sh("git checkout master")

  # Update Podspec and Framework files
  version_bump_podspec(path: "TOReachability.podspec", version_number: latest_version)
  set_info_plist_value(path: "TOReachabilityFramework/Info.plist", key: "CFBundleShortVersionString", value: latest_version)

  # Publish to CocoaPods trunk
  pod_push(use_bundle_exec: true,
            allow_warnings: true)

  # Commit and push, but pass through if they fail
  begin 
    reset_git_repo(force: true)
    sh("git pull")

    sh("git commit -m \"Bumped version to v" + latest_version + "\"")
    push_to_git_remote(
      remote: "origin", 
      local_branch: "master", 
      remote_branch: "master"
    )
  rescue => ex
    UI.error(ex)
  end

end